{"version":3,"sources":["components/Sidebar/MenuEntry.tsx","components/Sidebar/Content.tsx","components/Sidebar/Sidebar.tsx","components/About/About.tsx","pages/About.tsx","app/hooks.ts","components/Input/DatePicker.tsx","components/Input/TextInput.tsx","components/Input/DateInput.tsx","constants/constants.ts","components/Input/SelectInput.tsx","features/schedule/scheduleSlice.ts","api/schedule.tsx","components/AppointmentView/AppointmentView.tsx","assets/bunny.svg","components/DialogBox/DialogBox.tsx","components/Filter/Filter.tsx","components/Header/Header.tsx","components/AppointmentList/StatusBadge.tsx","components/AppointmentList/AppointmentEntry.tsx","components/AppointmentList/AppointmentList.tsx","assets/rocket.svg","components/Error404/Error404.tsx","pages/Calendar.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["MenuEntry","name","icon","selected","bgColor","color","p","borderRadius","_hover","cursor","direction","gridGap","alignItems","fontWeight","Content","location","useLocation","console","log","pathname","links","url","faHome","faHeart","isExternal","faBug","fontSize","mb","map","link","to","onClick","window","href","handleExternalUrl","Sidebar","useDisclosure","isOpen","onOpen","onClose","btnRef","useRef","w","maxW","h","aria-label","size","Hamburger","display","ref","placement","finalFocusRef","React","memo","About","justifyContent","alignContent","textAlign","loop","play","animationData","WorkingAnimation","style","width","AboutPage","px","py","minW","useAppDispatch","useDispatch","useAppSelector","useSelector","DatePicker","props","isClearable","showPopperArrow","rest","isLight","useColorMode","colorMode","className","InputBox","value","label","placeholder","onChange","required","DateInput","placeholderText","STATUS","SelectInput","variant","initialState","list","undefined","filter","scheduleSlice","createSlice","reducers","updateSchedule","state","action","payload","select","find","el","id","clearSelected","removeById","edit","_id","targetIndex","findIndex","add","unshift","setFilter","actions","API_URL","process","getSchedule","a","filters","axios","get","addSchedule","schedule","post","editSchedule","patch","deleteSchedule","delete","AppointmentView","isUpdate","useState","title","setTitle","Date","date","setDate","status","setStatus","toast","useToast","actionCaption","dispatch","useEffect","e","error","showSuccess","message","description","duration","isClosable","position","showError","handleSubmit","data","response","handleDelete","handleBack","textDecoration","flexGrow","onSubmit","TextInput","target","d","String","mt","type","colorScheme","mr","faEdit","DialogBox","component","isCentered","Filter","Header","isOpenFilter","onOpenFilter","onCloseFilter","src","Bunny","lineHeight","bg","_active","transform","getColor","StatusBadge","textTransform","AppointmentEntry","moment","format","Appointment","useBreakpointValue","base","md","fetchSchedule","ml","overflowY","maxH","entry","Error404","Rocket","Calendar","displayVariant","AppointmentList","App","minH","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","scheduleReducer","middleware","getDefaultMiddleware","serializableCheck","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dde0d2ed.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ntype Props = {\n  name: string; // name\n  icon: any;\n  selected?: boolean;\n};\nconst MenuEntry = ({ name, icon, selected }: Props) => {\n  const bgColor = selected ? \"blue.700\" : \"none\";\n  const color = selected ? \"white\" : \"gray.500\";\n\n  return (\n    <Box\n      p={3}\n      color={color}\n      bgColor={bgColor}\n      borderRadius={12}\n      _hover={{\n        cursor: \"pointer\",\n        bgColor: selected ? \"blue.700\" : \"gray.100\",\n        color: selected ? \"white\" : \"blue.700\",\n      }}\n    >\n      <Flex direction=\"row\" gridGap={2} alignItems=\"center\">\n        <FontAwesomeIcon icon={icon} />\n        <Text fontWeight=\"bold\">{name}</Text>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default MenuEntry;\n","import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { Text } from \"@chakra-ui/react\";\n\n// Local Assets\nimport { faHome, faHeart, faBug } from \"@fortawesome/free-solid-svg-icons\";\n\n// Local Imports\nimport MenuEntry from \"./MenuEntry\";\n\ntype Menu = {\n  url: string;\n  name: string;\n  icon: any;\n  isExternal?: boolean;\n};\nconst Content = () => {\n  const location = useLocation();\n  console.log(location.pathname);\n\n  const links: Menu[] = [\n    {\n      url: \"/\",\n      name: \"Home\",\n      icon: faHome,\n    },\n    {\n      url: \"/about\",\n      name: \"About\",\n      icon: faHeart,\n    },\n    {\n      url: \"https://github.com/kristianespina/ethereal-calendar/issues\",\n      isExternal: true,\n      name: \"Report\",\n      icon: faBug,\n    },\n  ];\n\n  const handleExternalUrl = (link: Menu) => {\n    if (link.isExternal) window.location.href = link.url;\n  };\n  return (\n    <>\n      {/* App Title */}\n      <Text color=\"blue.800\" fontWeight=\"bold\" fontSize={24} mb={4}>\n        Calendar App\n      </Text>\n\n      {/* Menu */}\n      {links.map((link) => (\n        <Link\n          key={link.name}\n          to={link.isExternal ? \"/\" : link.url}\n          onClick={() => handleExternalUrl(link)}\n        >\n          <MenuEntry\n            name={link.name}\n            icon={link.icon}\n            selected={link.url === location.pathname}\n          />\n        </Link>\n      ))}\n    </>\n  );\n};\n\nexport default Content;\n","import React, { useRef } from \"react\";\nimport {\n  Flex,\n  Drawer,\n  DrawerOverlay,\n  DrawerCloseButton,\n  DrawerBody,\n  DrawerContent,\n  useDisclosure,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\n\nimport Content from \"./Content\";\n\nconst Sidebar = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = useRef<HTMLButtonElement>(null);\n\n  return (\n    <Flex\n      w={[\"auto\", \"auto\", \"auto\", \"300px\"]}\n      maxW=\"300px\"\n      h=\"100%\"\n      p={[0, 0, 4, 4]}\n    >\n      <IconButton\n        aria-label=\"Open Menu\"\n        size=\"lg\"\n        bgColor=\"white\"\n        icon={<HamburgerIcon />}\n        display={[\"flex\", \"flex\", \"flex\", \"none\"]}\n        ref={btnRef}\n        onClick={onOpen}\n      />\n      <Drawer\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n\n          <DrawerBody>\n            <Content />\n          </DrawerBody>\n\n          {/* <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"blue\">Save</Button>\n          </DrawerFooter> */}\n        </DrawerContent>\n      </Drawer>\n      {/*Profile */}\n      <Flex\n        direction=\"column\"\n        w=\"100%\"\n        display={[\"none\", \"none\", \"none\", \"flex\"]}\n      >\n        <Content />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default React.memo(Sidebar);\n","import React from \"react\";\nimport { Flex, Box, Text, Container } from \"@chakra-ui/react\";\nimport Lottie from \"react-lottie-player\";\n// Local Imports\nimport WorkingAnimation from \"../../assets/working.json\";\n\nconst About = () => {\n  return (\n    <Flex\n      direction={[\"column\", \"column\", \"row\", \"row\"]}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      alignContent=\"center\"\n    >\n      <Box textAlign=\"center\">\n        <Lottie\n          loop\n          play\n          animationData={WorkingAnimation}\n          style={{ width: 360 }}\n        />\n      </Box>\n      <Box>\n        <Container>\n          <Text fontWeight=\"bold\" fontSize={24}>\n            About this Project\n          </Text>\n          <Text fontSize={12}>\n            This project is made using ReactJS (with Typescript)\n          </Text>\n        </Container>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport { Flex, Box } from \"@chakra-ui/react\";\n\n// Local Components\nimport { About } from \"../components/About\";\nconst AboutPage = () => {\n  return (\n    <Flex direction=\"column\" w=\"770px\" gridGap={4} p={[4, 4, 4, 0]}>\n      <Box bgColor=\"white\" px={4} py={8} borderRadius={12}>\n        <Flex direction={[\"column\", \"column\", \"row\", \"row\"]} gridGap={4}>\n          <Box minW={[\"full\", \"full\", \"240px\", \"240px\"]}>\n            <About />\n          </Box>\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default AboutPage;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport ReactDatePicker, { ReactDatePickerProps } from \"react-datepicker\";\nimport { useColorMode } from \"@chakra-ui/react\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./DatePicker.css\";\n\nfunction DatePicker(props: ReactDatePickerProps) {\n  const { isClearable = false, showPopperArrow = false, ...rest } = props;\n  const isLight = useColorMode().colorMode === \"light\"; //you can check what theme you are using right now however you want\n\n  return (\n    <div className={isLight ? \"light-theme\" : \"dark-theme\"}>\n      <ReactDatePicker\n        isClearable={isClearable}\n        showPopperArrow={showPopperArrow}\n        className=\"react-datapicker__input-text\"\n        {...rest}\n      />\n    </div>\n  );\n}\n\nexport default DatePicker;\n","import React from \"react\";\nimport { Text, Input, Box } from \"@chakra-ui/react\";\n\ntype Props = {\n  value?: string;\n  label: string;\n  placeholder?: string;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\nconst InputBox = ({ value, label, placeholder, onChange }: Props) => {\n  return (\n    <Box>\n      <Text fontWeight=\"bold\" fontSize={12} mb={1}>\n        {label}\n      </Text>\n      <Input\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        bgColor=\"gray.200\"\n        required\n      />\n    </Box>\n  );\n};\n\nexport default InputBox;\n","import React from \"react\";\nimport { Text, Box } from \"@chakra-ui/react\";\n\nimport DatePicker from \"./DatePicker\";\n\ntype Props = {\n  label: string;\n  placeholder?: string;\n  onChange: (d: Date) => void;\n  value?: Date;\n};\nconst DateInput = ({ value, label, placeholder, onChange }: Props) => {\n  return (\n    <Box>\n      <Text fontWeight=\"bold\" fontSize={12} mb={1}>\n        {label}\n      </Text>\n      <DatePicker\n        placeholderText={placeholder}\n        onChange={onChange}\n        selected={value}\n        required\n      />\n    </Box>\n  );\n};\n\nexport default DateInput;\n","export const STATUS = [\"dropped\", \"pending\", \"ongoing\", \"done\"];\n","import React from \"react\";\nimport { Text, Select, Box } from \"@chakra-ui/react\";\n\nimport { STATUS } from \"../../constants/constants\";\n\ntype Props = {\n  value?: string;\n  label: string;\n  placeholder?: string;\n  onChange: (e: any) => void;\n};\n\nconst SelectInput = ({ value, label, placeholder, onChange }: Props) => {\n  return (\n    <Box>\n      <Text fontWeight=\"bold\" fontSize={12} mb={1}>\n        {label}\n      </Text>\n      <Select\n        variant=\"filled\"\n        bgColor=\"gray.200\"\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange}\n        required\n      >\n        {STATUS.map((value) => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </Select>\n    </Box>\n  );\n};\n\nexport default SelectInput;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { ScheduleState, Schedule } from \"../../types/schedule\";\n\n// Define the initial state using that type\nconst initialState: ScheduleState = {\n  list: [],\n  selected: undefined,\n  filter: \"\",\n};\n\nexport const scheduleSlice = createSlice({\n  name: \"schedule\",\n  initialState,\n  reducers: {\n    updateSchedule: (state, action: PayloadAction<Schedule[]>) => {\n      return {\n        ...state,\n        list: action.payload,\n      };\n    },\n    select: (state, action: PayloadAction<number>) => {\n      state.selected = state.list.find((el) => el.id === action.payload);\n    },\n    clearSelected: (state) => {\n      state.selected = undefined;\n    },\n    removeById: (state, action: PayloadAction<number>) => {\n      state.list = state.list.filter((el) => el.id !== action.payload);\n    },\n    edit: (state, action: PayloadAction<Schedule>) => {\n      const _id = action.payload.id;\n      const targetIndex = state.list.findIndex((el) => el.id === _id);\n      state.list[targetIndex] = action.payload;\n    },\n    add: (state, action: PayloadAction<Schedule>) => {\n      state.list.unshift(action.payload);\n    },\n    setFilter: (state, action: PayloadAction<string>) => {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateSchedule,\n  select,\n  clearSelected,\n  removeById,\n  edit,\n  add,\n  setFilter,\n} = scheduleSlice.actions;\n\nexport default scheduleSlice.reducer;\n","import axios from \"axios\";\nimport { Schedule } from \"../types/schedule\";\n\nconst API_URL = process.env.REACT_APP_API_HOST;\n\nexport const getSchedule = async (filters = \"\") => {\n  return await axios.get(`${API_URL}/schedule${filters}`);\n};\n\nexport const addSchedule = async (schedule: Partial<Schedule>) => {\n  return await axios.post(`${API_URL}/schedule`, schedule);\n};\n\nexport const editSchedule = async (schedule: Schedule) => {\n  return await axios.patch(`${API_URL}/schedule/${schedule.id}`, schedule);\n};\n\nexport const deleteSchedule = async (schedule: Schedule) => {\n  return await axios.delete(`${API_URL}/schedule/${schedule.id}`);\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Flex, Box, Button, Spacer, useToast } from \"@chakra-ui/react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\n// Components\nimport { TextInput, DateInput } from \"../Input\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n  add,\n  edit,\n  clearSelected,\n  removeById,\n} from \"../../features/schedule/scheduleSlice\";\nimport SelectInput from \"../Input/SelectInput\";\n// API\nimport { editSchedule, addSchedule, deleteSchedule } from \"../../api/schedule\";\nimport { Schedule } from \"../../types/schedule\";\nimport { Status } from \"../../constants/enums\";\ntype Props = {\n  isUpdate?: boolean;\n  onClose?: () => void;\n};\n\nconst AppointmentView: React.FC<Props> = ({ isUpdate, onClose }) => {\n  const [title, setTitle] = useState<string>();\n  const [date, setDate] = useState<Date>(new Date());\n  const [status, setStatus] = useState<Status | string>();\n  const toast = useToast();\n  const { selected } = useAppSelector((state) => state.schedule);\n\n  const display = isUpdate ? \"flex\" : \"none\";\n  const actionCaption = isUpdate ? \"Update\" : \"Create\";\n  const dispatch = useAppDispatch();\n\n  // Handlers\n  const onChangeTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n  const onChangeDate = (d: Date) => {\n    setDate(new Date(d));\n  };\n  const onChangeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.target.value);\n  };\n\n  useEffect(() => {\n    // Update view\n    try {\n      setTitle(selected?.name ?? \"\");\n      selected?.date && setDate(new Date(selected.date));\n      setStatus(selected?.status);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [selected]);\n\n  // Reusable function\n  const showSuccess = (message: String) => {\n    toast({\n      title: \"Successful\",\n      description: message,\n      status: \"success\",\n      duration: 3000,\n      isClosable: true,\n      position: \"top\",\n    });\n  };\n  const showError = (message: String) => {\n    toast({\n      title: \"Failed\",\n      description: message,\n      status: \"error\",\n      duration: 3000,\n      isClosable: true,\n      position: \"top\",\n    });\n  };\n  // Handlers\n  const handleSubmit = async () => {\n    // Action: Update\n    if (isUpdate) {\n      if (selected) {\n        const data: Schedule = {\n          ...selected,\n          name: title || \"\",\n          status: status,\n          date: date,\n        };\n        const response = await editSchedule(data);\n        if (response.status === 200) {\n          // Update store\n          onClose && onClose();\n          dispatch(edit(response.data));\n          showSuccess(\"Successfully edited the schedule\");\n        } else {\n          showError(\"Cannot edit schedule\");\n        }\n      } else {\n        showError(\"Please select a schedule first\");\n      }\n    }\n\n    // Action: Create\n    if (!isUpdate) {\n      const data: Partial<Schedule> = {\n        name: title ?? \"\",\n        status: status,\n        date: date,\n      };\n      const response = await addSchedule(data);\n      if (response.status === 201) {\n        // Update store\n        onClose && onClose();\n        dispatch(add(response.data));\n        showSuccess(\"Successfully created schedule\");\n      } else {\n        showError(\"Cannot create schedule\");\n      }\n    }\n  };\n  const handleDelete = async () => {\n    const response = selected && (await deleteSchedule(selected));\n    if (response?.status === 200) {\n      selected && dispatch(removeById(selected.id));\n      showSuccess(\"Successfully deleted schedule\");\n      dispatch(clearSelected());\n    } else {\n      showError(\"Cannot delete schedule\");\n    }\n  };\n  const handleBack = async () => {\n    dispatch(clearSelected());\n    onClose && onClose();\n  };\n\n  // Theming\n  const bgColor = onClose ? \"white\" : \"gray.50\";\n  return (\n    <Flex\n      direction=\"column\"\n      w=\"full\"\n      gridGap={4}\n      justifyContent=\"center\"\n      bgColor={bgColor}\n      p={4}\n      borderRadius={8}\n    >\n      {/* Title */}\n      <Flex direction=\"row\" w=\"full\">\n        <Box\n          position=\"absolute\"\n          fontSize={12}\n          fontWeight=\"bold\"\n          color=\"gray.500\"\n          py={1}\n          _hover={{\n            color: \"blue.700\",\n            cursor: \"pointer\",\n            textDecoration: \"underline\",\n          }}\n          display={display}\n          onClick={handleBack}\n        >\n          Back\n        </Box>\n        <Box\n          flexGrow={1}\n          textAlign=\"center\"\n          fontSize={18}\n          fontWeight=\"bold\"\n          color=\"gray.700\"\n        >\n          {isUpdate ? \"Update\" : \"Create appointment\"}\n        </Box>\n      </Flex>\n      {/* Contents */}\n\n      <form onSubmit={handleSubmit}>\n        <Flex direction=\"column\" gridGap={4}>\n          <TextInput\n            label=\"Title\"\n            placeholder=\"Enter appointment title\"\n            value={title}\n            onChange={onChangeTitle}\n          />\n          <DateInput\n            label=\"Date\"\n            placeholder=\"Select schedule date\"\n            value={date}\n            onChange={onChangeDate}\n          />\n          <SelectInput\n            label=\"Status\"\n            placeholder=\"Choose status\"\n            value={String(status)}\n            onChange={onChangeStatus}\n          />\n          <Flex direction=\"row\" mt={4}>\n            {isUpdate && <Button onClick={handleDelete}>Delete</Button>}\n            <Spacer />\n            <Button type=\"submit\" colorScheme=\"green\">\n              <Box mr={1}>\n                <FontAwesomeIcon icon={faEdit} />\n              </Box>\n              {actionCaption}\n            </Button>\n          </Flex>\n        </Flex>\n      </form>\n    </Flex>\n  );\n};\n\nexport default AppointmentView;\n","export default __webpack_public_path__ + \"static/media/bunny.b2aeb543.svg\";","import React from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  ModalBody,\n} from \"@chakra-ui/react\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  component: any;\n};\nconst DialogBox = ({ isOpen, onClose, component }: Props) => {\n  return (\n    <Modal onClose={onClose} isOpen={isOpen} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalCloseButton />\n        <ModalBody>{component}</ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default DialogBox;\n","import React, { useState } from \"react\";\nimport { Flex, Box, Button, Spacer } from \"@chakra-ui/react\";\n// Components\nimport { SelectInput } from \"../Input\";\n// Hooks\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { setFilter } from \"../../features/schedule/scheduleSlice\";\nimport { Status } from \"../../constants/enums\";\ntype Props = {\n  isUpdate?: boolean;\n  onClose?: () => void;\n};\n\nconst Filter: React.FC<Props> = ({ onClose }) => {\n  const dispatch = useAppDispatch();\n  const [status, setStatus] = useState<Status | string>();\n  const onChangeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.target.value);\n  };\n\n  // Handlers\n  const handleSubmit = () => {\n    if (status !== \"\") {\n      dispatch(setFilter(`?status=${status}`));\n      onClose && onClose();\n    }\n  };\n  const clearFilter = () => {\n    dispatch(setFilter(\"\"));\n    onClose && onClose();\n  };\n  return (\n    <Flex direction=\"column\" w=\"full\" gridGap={4} justifyContent=\"center\">\n      {/* Title */}\n      <Flex direction=\"row\" w=\"full\">\n        <Box\n          flexGrow={1}\n          textAlign=\"center\"\n          fontSize={18}\n          fontWeight=\"bold\"\n          color=\"gray.800\"\n        >\n          Filter\n        </Box>\n      </Flex>\n      {/* Contents */}\n\n      <form onSubmit={handleSubmit}>\n        <Flex direction=\"column\" gridGap={4}>\n          <SelectInput\n            label=\"Status\"\n            placeholder=\"Choose status\"\n            value={String(status)}\n            onChange={onChangeStatus}\n          />\n          <Flex direction=\"row\" mt={4}>\n            <Button onClick={clearFilter} colorScheme=\"green\" variant=\"link\">\n              Clear Filter\n            </Button>\n            <Spacer />\n            <Button type=\"submit\" colorScheme=\"green\">\n              Filter\n            </Button>\n          </Flex>\n        </Flex>\n      </form>\n    </Flex>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport { Flex, Image, Text, Button, useDisclosure } from \"@chakra-ui/react\";\n\nimport { AppointmentView } from \"../AppointmentView\";\n\nimport Bunny from \"../../assets/bunny.svg\";\nimport { DialogBox } from \"../DialogBox\";\nimport { Filter } from \"../Filter\";\n\nconst Header = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const {\n    isOpen: isOpenFilter,\n    onOpen: onOpenFilter,\n    onClose: onCloseFilter,\n  } = useDisclosure();\n\n  return (\n    <>\n      <Flex direction=\"row\" gridGap={4}>\n        <Image src={Bunny} aria-label=\"Bunny\" />\n        <Flex\n          direction=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"left\"\n          alignContent=\"center\"\n        >\n          <Text\n            fontSize={18}\n            fontWeight=\"bold\"\n            lineHeight={0.5}\n            color=\"gray.700\"\n          >\n            Welcome\n          </Text>\n          <Text fontSize={36} fontWeight=\"bold\" color=\"gray.700\">\n            Kristian Espina\n          </Text>\n          <Flex direction=\"row\" gridGap={4}>\n            <Button\n              size=\"sm\"\n              onClick={onOpen}\n              bgColor=\"blue.800\"\n              color=\"white\"\n              _hover={{ bg: \"blue.700\" }}\n              _active={{ bg: \"blue.700\", transform: \"scale(0.98)\" }}\n            >\n              Create appointment\n            </Button>\n            <Button\n              color=\"blue.800\"\n              size=\"sm\"\n              variant=\"link\"\n              onClick={onOpenFilter}\n            >\n              Filter\n            </Button>\n          </Flex>\n        </Flex>\n      </Flex>\n\n      <DialogBox\n        isOpen={isOpen}\n        onClose={onClose}\n        component={<AppointmentView isUpdate={false} onClose={onClose} />}\n      />\n\n      <DialogBox\n        isOpen={isOpenFilter}\n        onClose={onCloseFilter}\n        component={<Filter onClose={onCloseFilter} />}\n      />\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"@chakra-ui/react\";\n// Constants\nimport { Status } from \"../../constants/enums\";\n\ntype Props = {\n  status: Status;\n};\n\nconst getColor = (status: Status) => {\n  switch (status as any) {\n    case \"dropped\":\n      return { color: \"red.500\", bgColor: \"red.200\" };\n    case \"pending\":\n      return { color: \"gray.500\", bgColor: \"gray.200\" };\n    case \"ongoing\":\n      return { color: \"blue.500\", bgColor: \"blue.200\" };\n    case \"done\":\n      return { color: \"green.500\", bgColor: \"green.200\" };\n  }\n};\n\nconst StatusBadge = ({ status }: Props) => {\n  return (\n    <Box\n      bgColor={getColor(status)?.bgColor}\n      color={getColor(status)?.color}\n      px={3}\n      py={0.25}\n      borderRadius={16}\n      fontSize={12}\n      fontWeight=\"bold\"\n      textTransform=\"capitalize\"\n    >\n      {status}\n    </Box>\n  );\n};\n\nexport default StatusBadge;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Flex, Text, Spacer } from \"@chakra-ui/react\";\n\n// Constants\nimport { Status } from \"../../constants/enums\";\nimport StatusBadge from \"./StatusBadge\";\n\ntype Props = {\n  title: string;\n  date: Date;\n  status: Status;\n  onClick: () => void;\n};\n\nconst AppointmentEntry = ({ title, date, status, onClick }: Props) => {\n  return (\n    <Flex\n      direction=\"column\"\n      w=\"full\"\n      bgColor=\"white\"\n      p={4}\n      borderRadius={12}\n      _hover={{ cursor: \"pointer\", bgColor: \"gray.50\" }}\n      onClick={onClick}\n    >\n      <Text fontSize={14} fontWeight=\"bold\" color=\"gray.600\">\n        {title}\n      </Text>\n      <Flex direction=\"row\">\n        <Text fontSize={10} fontWeight=\"bold\" color=\"gray.500\">\n          {moment(date).format(\"MMM DD, YYYY\")}\n        </Text>\n        <Spacer />\n        <StatusBadge status={status} />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default AppointmentEntry;\n","import React, { useEffect } from \"react\";\nimport {\n  Flex,\n  Text,\n  useBreakpointValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\n\n// Hooks\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport { select, updateSchedule } from \"../../features/schedule/scheduleSlice\";\n\n// Local Components\nimport AppointmentEntry from \"./AppointmentEntry\";\nimport { AppointmentView } from \"../AppointmentView\";\nimport { DialogBox } from \"../DialogBox\";\n\n// API\nimport { getSchedule } from \"../../api/schedule\";\n\nconst Appointment = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const variant = useBreakpointValue({ base: \"mobile\", md: \"md\" });\n  const { list, filter } = useAppSelector((state) => state.schedule);\n  const dispatch = useAppDispatch();\n\n  // Handlers\n  const onClick = (id: number) => {\n    dispatch(select(id));\n\n    // Create Modal if mobile\n    if (variant === \"mobile\") onOpen();\n  };\n\n  // Mount\n  useEffect(() => {\n    const fetchSchedule = async () => {\n      const { status, data } = await getSchedule(filter);\n      if (status === 200) {\n        dispatch(updateSchedule(data));\n      }\n    };\n    fetchSchedule();\n    //eslint-disable-next-line\n  }, [filter]);\n\n  return (\n    <>\n      <Flex direction=\"row\" gridGap={4} w=\"full\">\n        {/* <Image src={Bunny} aria-label=\"Bunny\" /> */}\n        <Flex\n          direction=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"left\"\n          alignContent=\"center\"\n          w=\"full\"\n        >\n          <Flex direction=\"row\">\n            <Text\n              fontSize={18}\n              fontWeight=\"bold\"\n              mb={4}\n              ml={3}\n              color=\"gray.600\"\n            >\n              Appointments\n            </Text>\n          </Flex>\n          <Flex\n            direction=\"column\"\n            gridGap={4}\n            overflowY=\"hidden\"\n            maxH={[\"auto\", \"auto\", \"350px\", \"350px\"]}\n            _hover={{\n              overflowY: \"auto\",\n            }}\n          >\n            {list.map((entry) => (\n              <AppointmentEntry\n                key={entry.id}\n                title={entry.name}\n                date={entry.date}\n                status={entry.status}\n                onClick={() => onClick(entry.id)}\n              />\n            ))}\n          </Flex>\n        </Flex>\n      </Flex>\n      <DialogBox\n        isOpen={isOpen}\n        onClose={onClose}\n        component={<AppointmentView isUpdate={true} onClose={onClose} />}\n      />\n    </>\n  );\n};\n\nexport default Appointment;\n","export default __webpack_public_path__ + \"static/media/rocket.fd932cea.svg\";","import React from \"react\";\nimport { Flex, Image, Text } from \"@chakra-ui/react\";\n\nimport Rocket from \"../../assets/rocket.svg\";\nconst Error404 = () => {\n  return (\n    <Flex\n      direction=\"column\"\n      alignContent=\"center\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      w=\"full\"\n    >\n      <Image src={Rocket} maxW={300} />\n      <Text fontWeight=\"bold\" fontSize={18} color=\"gray.700\">\n        Nothing to see here\n      </Text>\n      <Text fontWeight=\"regular\" fontSize={12} color=\"gray.500\">\n        Select an appointment to continue\n      </Text>\n    </Flex>\n  );\n};\n\nexport default Error404;\n","import React from \"react\";\nimport { Flex, Box, useBreakpointValue } from \"@chakra-ui/react\";\n\n// Hooks\nimport { useAppSelector } from \"../app/hooks\";\n\n// Components\nimport { Header } from \"../components/Header\";\nimport { AppointmentList } from \"../components/AppointmentList\";\nimport { AppointmentView } from \"../components/AppointmentView\";\nimport { Error404 } from \"../components/Error404\";\n\nconst Calendar = () => {\n  const displayVariant = useBreakpointValue({ base: \"none\", md: \"flex\" });\n  const { selected } = useAppSelector((state) => state.schedule);\n  return (\n    <Flex direction=\"column\" w=\"770px\" gridGap={4}>\n      <Box bgColor=\"white\" p={4} borderRadius={12}>\n        <Header />\n      </Box>\n      <Box bgColor=\"white\" px={4} py={8} borderRadius={12}>\n        <Flex direction={[\"column\", \"column\", \"row\", \"row\"]} gridGap={4}>\n          <Box minW={[\"full\", \"full\", \"240px\", \"240px\"]}>\n            <AppointmentList />\n          </Box>\n          <Box flexGrow={1} display={displayVariant}>\n            {!selected ? <Error404 /> : <AppointmentView isUpdate={true} />}\n          </Box>\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Calendar;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Flex } from \"@chakra-ui/react\";\n\n// Local Imports\nimport { Sidebar } from \"./components/Sidebar\";\n\nimport { About, Calendar } from \"./pages\";\nfunction App() {\n  return (\n    <Router>\n      <Flex direction={[\"column\", \"column\", \"column\", \"row\"]} minH=\"100vh\">\n        <Sidebar />\n        <Flex\n          bgColor=\"gray.200\"\n          w=\"full\"\n          alignContent=\"center\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexGrow={1}\n          p={4}\n        >\n          <Switch>\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/\" component={Calendar} />\n          </Switch>\n        </Flex>\n      </Flex>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport scheduleReducer from \"../features/schedule/scheduleSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    schedule: scheduleReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// ChakraUI\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}